{"version":3,"sources":["game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameBoard","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tileSize","money","currentSteps","generationSteps","size","scale","centerX","centerY","canvasSize","canvas","ctx","allTiles","newTiles","gridTiles","allUnits","getTile","x","y","addMissing","tile","type","setTile","push","drawTile","fillStyle","vTileSize","vTileX","vTileY","fillRect","Math","floor","ceil","seedWater","random","getNeighbors","addNewTiles","i","forEach","neighbors","counts","getTypes","seedNature","seedRoads","j","i2","j2","console","log","existingtile","getCloseNeighbors","t","tiles","busyroad","road","house","apartment","shoppingcenter","smallbusiness","downtown","empty","any","updateTiles","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","initialType","err","return","drawAllTiles","concat","runStep","setTimeout","startRunningDay","moveUnits","unit","stepSize","animationsPerCarTile","goalX","nextTile","goalY","updateUnits","unitX","unitY","difX","lastTile","difY","straightX","straightY","business","filter","n","length","unitSpot","convertToScreenSpace","businessSpot","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","closePath","straightRoad","nextRoad","roads","round","onlyOneBusiness","runDay","drawUnit","vRadius","drawAllUnits","u","currentAnimationStep","offsetX","arguments","offsetY","clearMap","dragging","startX","startY","state","inherits","createClass","key","_this2","react_default","a","createElement","onClick","onMouseDown","ev","screenX","screenY","onMouseUp","onMouseMove","width","toString","height","style","ref","c","getContext","React","Component","App","className","game_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5636bd61.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface entity {\r\n    x: number;\r\n    y: number;\r\n\r\n    //onDraw: (ctx: CanvasRenderingContext2D) => void;\r\n}\r\n\r\ntype TileType = \"yourbusiness\" | \"empty\" | \"busyroad\" | \"road\" | \"house\" | \"apartment\" | \"smallbusiness\" | \"shoppingcenter\" | \"downtown\" | \"water\" | \"nature\";\r\n\r\ninterface IBusiness extends ITile {\r\n    range: number,\r\n    good: \"Food\" | \"Coffee\" | \"Gas\",\r\n}\r\n\r\ninterface ITile extends entity {\r\n    type: TileType,\r\n}\r\n\r\ntype UnitType = \"person\" | \"car\";\r\n\r\ninterface IUnit extends entity {\r\n    type: UnitType;\r\n\r\n    nextTile?: ITile;\r\n    lastTile: ITile;\r\n\r\n    \r\n}\r\n\r\nexport class GameBoard extends React.Component {\r\n    private tileSize = 10;\r\n    private money = 100;\r\n\r\n    private currentSteps = 0;\r\n    private generationSteps = 100;\r\n\r\n    /** Starting size */\r\n    private size = 50;\r\n\r\n    private scale = 1;\r\n    private centerX = this.size / 2;\r\n    private centerY = this.size / 2;\r\n    private canvasSize = 800;\r\n\r\n    private canvas: HTMLCanvasElement | null = null;\r\n    private ctx: CanvasRenderingContext2D | null = null;\r\n    private allTiles: ITile[] = [];\r\n    private newTiles: ITile[] = [];\r\n    private gridTiles: { [key: string]: ITile } = {};\r\n\r\n    private allUnits: IUnit[] = [];\r\n\r\n    private getTile = (x: number, y: number, addMissing: boolean): ITile | undefined => {\r\n        var tile = this.gridTiles[x + \",\" + y];\r\n        if (!tile && addMissing) {\r\n            tile = { x, y, type: \"empty\" };\r\n            this.setTile(x, y, tile);\r\n        }\r\n\r\n        return tile;\r\n    }\r\n\r\n    private setTile = (x: number, y: number, tile: ITile) => {\r\n        if (!this.gridTiles[x + \",\" + y]) {\r\n            this.newTiles.push(tile);\r\n        }\r\n\r\n        this.gridTiles[x + \",\" + y] = tile;\r\n    }\r\n\r\n    private drawTile = (tile: ITile, ctx: CanvasRenderingContext2D) => {\r\n        switch (tile.type) {\r\n            case \"yourbusiness\":\r\n                ctx.fillStyle = \"purple\";\r\n                break;\r\n            case \"water\":\r\n                ctx.fillStyle = \"blue\";\r\n                break;\r\n            case \"nature\":\r\n                ctx.fillStyle = \"darkgreen\";\r\n                break;\r\n            case \"road\":\r\n                ctx.fillStyle = \"grey\";\r\n                break;\r\n            case \"busyroad\":\r\n                ctx.fillStyle = \"#555\";\r\n                break;\r\n            case \"house\":\r\n                ctx.fillStyle = \"brown\";\r\n                break;\r\n            case \"apartment\":\r\n                ctx.fillStyle = \"red\";\r\n                break;\r\n            case \"smallbusiness\":\r\n                ctx.fillStyle = \"orange\";\r\n                break;\r\n            case \"shoppingcenter\":\r\n                ctx.fillStyle = \"yellow\";\r\n                break;\r\n            case \"downtown\":\r\n                ctx.fillStyle = \"lightgrey\";\r\n                break;\r\n            default:\r\n                ctx.fillStyle = \"green\";\r\n                break;\r\n        }\r\n\r\n        var vTileSize = this.tileSize * this.scale;\r\n        var vTileX = ((tile.x - this.centerX)) * vTileSize + (this.canvasSize / 2);\r\n        var vTileY = ((tile.y - this.centerY)) * vTileSize + (this.canvasSize / 2);\r\n\r\n        ctx.fillRect(\r\n            Math.floor(vTileX),\r\n            Math.floor(vTileY),\r\n            Math.ceil(vTileSize),\r\n            Math.ceil(vTileSize)\r\n        );\r\n    }\r\n\r\n    constructor(props: Readonly<{}>) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    private seedWater = () => {\r\n        for (var x = this.size * -.5; x < this.size * 1.5; x++) {\r\n            for (var y = this.size * -.5; y < this.size * 1.5; y++) {\r\n                if (Math.random() < .002) {\r\n                    this.setTile(x, y, { x, y, type: \"water\" });\r\n                    this.getNeighbors(x, y, true);\r\n                }\r\n            }\r\n        }\r\n        this.addNewTiles();\r\n\r\n        for (var i = 0; i < 5; i++) {\r\n            this.allTiles.forEach(x => {\r\n                if (x.type == \"empty\") {\r\n                    var neighbors = this.getNeighbors(x.x, x.y, true);\r\n                    var counts = this.getTypes(neighbors);\r\n\r\n                    if (counts[\"water\"] > 2) {\r\n                        if (Math.random() < .33) {\r\n                            x.type = \"water\";\r\n                        }\r\n                    }\r\n                    else if (counts[\"water\"] > 1) {\r\n                        if (Math.random() < .25) {\r\n                            x.type = \"water\";\r\n                        }\r\n                    }\r\n                    else if (Math.random() < .05) {\r\n                        x.type = \"water\";\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.addNewTiles();\r\n        }\r\n    }\r\n\r\n    private seedNature = () => {\r\n        for (var x = 0; x < this.size; x++) {\r\n            for (var y = 0; y < this.size; y++) {\r\n                if (!this.getTile(x, y, false)) {\r\n                    if (Math.random() < .005) {\r\n                        this.setTile(x, y, { x, y, type: \"nature\" });\r\n                        this.getNeighbors(x, y, true);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.addNewTiles();\r\n\r\n        for (var i = 0; i < 7; i++) {\r\n            this.allTiles.forEach(x => {\r\n                if (x.type == \"empty\") {\r\n                    var neighbors = this.getNeighbors(x.x, x.y, true);\r\n                    var counts = this.getTypes(neighbors);\r\n\r\n                    if (counts[\"water\"] > 2 || counts[\"nature\"] > 2) {\r\n                        if (Math.random() < .33) {\r\n                            x.type = \"nature\";\r\n                        }\r\n                    }\r\n                    else if (Math.random() < .05) {\r\n                        x.type = \"nature\";\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.addNewTiles();\r\n        }\r\n    }\r\n\r\n    private seedRoads = () => {\r\n        var i = Math.floor((this.size * .25) + Math.random() * (this.size * .25));\r\n        var j = Math.floor((this.size * .25) + Math.random() * (this.size * .25));\r\n        var i2 = Math.floor((i + this.size / 7) + Math.random() * (this.size * .5));\r\n        var j2 = Math.floor((j + this.size / 7) + Math.random() * (this.size * .5));\r\n        console.log(i + \",\" + j);\r\n        console.log(i2 + \",\" + j2);\r\n\r\n        this.centerX = j;\r\n        this.centerY = i;\r\n\r\n        for (var x = 0; x < this.size; x++) {\r\n            for (var y = 0; y < this.size; y++) {\r\n                if (x === j || y === i || x === j2 || y === i2) {\r\n                    let tile: ITile = { type: \"road\", x, y };\r\n\r\n                    var existingtile = this.getTile(x, y, false);\r\n                    if (existingtile) {\r\n                        existingtile.type = \"road\";\r\n                    }\r\n                    else {\r\n                        this.setTile(x, y, tile);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.getTile(j, i, false)!.type = \"busyroad\";\r\n        this.getCloseNeighbors(j, i, false).forEach(t => {\r\n            if (t) {\r\n                t.type = \"busyroad\";\r\n            }\r\n        });\r\n    }\r\n\r\n    private getCloseNeighbors = (x: number, y: number, addMissing: boolean): (ITile | undefined)[] => {\r\n        return [\r\n            this.getTile(x - 1, y, addMissing),\r\n            this.getTile(x, y - 1, addMissing),\r\n            this.getTile(x + 1, y, addMissing),\r\n            this.getTile(x, y + 1, addMissing),\r\n        ];\r\n    }\r\n\r\n    private getNeighbors = (x: number, y: number, addMissing: boolean): (ITile | undefined)[] => {\r\n        return [\r\n            this.getTile(x - 1, y, addMissing),\r\n            this.getTile(x - 1, y - 1, addMissing),\r\n            this.getTile(x, y - 1, addMissing),\r\n            this.getTile(x + 1, y - 1, addMissing),\r\n            this.getTile(x + 1, y, addMissing),\r\n            this.getTile(x + 1, y + 1, addMissing),\r\n            this.getTile(x, y + 1, addMissing),\r\n            this.getTile(x - 1, y + 1, addMissing),\r\n        ];\r\n    }\r\n\r\n    private getTypes = (tiles: (ITile | undefined)[]): { [types: string]: number } => {\r\n        var counts: { [types: string]: number } = {\r\n            busyroad: 0,\r\n            road: 0,\r\n            house: 0,\r\n            apartment: 0,\r\n            shoppingcenter: 0,\r\n            smallbusiness: 0,\r\n            downtown: 0,\r\n            empty: 0,\r\n            any: 0,\r\n        };\r\n\r\n        tiles.forEach(t => {\r\n            if (t) {\r\n                counts[t.type] = counts[t.type] || 0;\r\n                counts[t.type]++;\r\n                if (t.type != \"empty\" && t.type != \"water\" && t.type != \"nature\") {\r\n                    counts[\"any\"]++;\r\n                }\r\n            }\r\n            else {\r\n                counts[\"empty\"]++;\r\n            }\r\n        })\r\n\r\n        return counts;\r\n    }\r\n\r\n    private updateTiles = () => {\r\n        // eslint-disable-next-line\r\n        for (var tile of this.allTiles) {\r\n            var neighbors = this.getNeighbors(tile.x, tile.y, tile.type != \"empty\");\r\n            var counts = this.getTypes(neighbors);\r\n\r\n            var initialType = tile.type;\r\n            switch (tile.type) {\r\n                case \"nature\":\r\n                    // slowly clear nature if devloped nearby?\r\n                    if (counts[\"any\"] >= 1) {\r\n                        if (Math.random() < .1) {\r\n                            tile.type = \"empty\";\r\n                        }\r\n                    }\r\n                case \"empty\":\r\n                    if (counts[\"busyroad\"] > 2) {\r\n                        if (Math.random() < .025) {\r\n                            tile.type = \"downtown\";\r\n                        }\r\n                    }\r\n\r\n                    if (counts[\"road\"] == 1) {\r\n                        // only straight for now...\r\n                        if ((neighbors[0] && neighbors[0]!.type == \"road\")\r\n                            || (neighbors[2] && neighbors[2]!.type == \"road\")\r\n                            || (neighbors[4] && neighbors[4]!.type == \"road\")\r\n                            || (neighbors[6] && neighbors[6]!.type == \"road\")\r\n                        ) {\r\n                            if (Math.random() < .15) {\r\n                                tile.type = \"road\";\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (counts[\"road\"] == 2 && !(counts[\"house\"] >= 2)) {\r\n                        if (Math.random() < .05) {\r\n                            tile.type = \"house\";\r\n                        }\r\n                    }\r\n\r\n                    if (counts[\"road\"] + counts[\"busyroad\"] == 3) {\r\n                        if (Math.random() < .1) {\r\n                            tile.type = \"road\";\r\n                        }\r\n\r\n                        else if (Math.random() < ((counts[\"house\"] >= 2) ? .05 : .1)) {\r\n                            tile.type = \"house\";\r\n                        }\r\n\r\n                        else if (Math.random() < .1) {\r\n                            tile.type = \"smallbusiness\";\r\n                        }\r\n                    }\r\n\r\n                    if (counts[\"road\"] > 5) {\r\n                        if (Math.random() < .01) {\r\n                            tile.type = \"downtown\";\r\n                        }\r\n                        else if (Math.random() < .1) {\r\n                            tile.type = \"apartment\";\r\n                        }\r\n                    }\r\n                    if (counts[\"downtown\"] > 0) {\r\n                        if (counts[\"road\"] > 2 || counts[\"busyroad\"] >= 1) {\r\n                            if (Math.random() < .01) {\r\n                                tile.type = \"downtown\";\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (Math.random() < .001) {\r\n                                tile.type = \"downtown\";\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"smallbusiness\":\r\n                    if (counts[\"busyroad\"] > 0) {\r\n                        if (Math.random() < .01) {\r\n                            tile.type = \"shoppingcenter\";\r\n                        }\r\n                    }\r\n\r\n                    else if (!counts[\"smallbusiness\"] && !counts[\"apartment\"]) {\r\n                        if (Math.random() < .01) {\r\n                            tile.type = \"empty\";\r\n                        }\r\n                    }\r\n\r\n                    else if (counts[\"smallbusiness\"] >= 1) {\r\n                        if (Math.random() < .05) {\r\n                            tile.type = \"empty\";\r\n                        }\r\n                    }\r\n\r\n                    if (counts[\"road\"] == 5 && !(counts[\"house\"] > 0)) {\r\n                        if (Math.random() < .1) {\r\n                            tile.type = \"shoppingcenter\";\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n\r\n                case \"house\":\r\n                    if (counts[\"house\"] > 2) {\r\n                        if (Math.random() < .1) {\r\n                            tile.type = \"apartment\";\r\n                        }\r\n                    }\r\n\r\n                    else if (counts[\"downtown\"] > 0) {\r\n                        if (Math.random() < .1) {\r\n                            tile.type = \"empty\";\r\n                        }\r\n                    }\r\n\r\n                    else if (counts[\"busyroad\"] > 0) {\r\n                        if (Math.random() < .1) {\r\n                            tile.type = \"empty\";\r\n                        }\r\n                        else if (Math.random() < .1) {\r\n                            tile.type = \"apartment\";\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n\r\n                case \"busyroad\":\r\n                    if (counts[\"road\"] + counts[\"busyroad\"] == 8) {\r\n                        if (Math.random() < .25) {\r\n                            tile.type = \"downtown\";\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"road\":\r\n                    if (counts[\"road\"] + counts[\"busyroad\"] == 8) {\r\n                        if (Math.random() < .1) {\r\n                            tile.type = \"downtown\";\r\n                        }\r\n                    }\r\n                    if (counts[\"downtown\"] >= 1) {\r\n                        if (Math.random() < .01) {\r\n                            tile.type = \"busyroad\";\r\n                        }\r\n                    }\r\n                    if (counts[\"busyroad\"] <= 2) {\r\n                        // only straight lines\r\n                        if ((neighbors[0] && neighbors[0]!.type == \"busyroad\")\r\n                            || (neighbors[2] && neighbors[2]!.type == \"busyroad\")\r\n                            || (neighbors[4] && neighbors[4]!.type == \"busyroad\")\r\n                            || (neighbors[6] && neighbors[6]!.type == \"busyroad\")\r\n                        ) {\r\n                            if (Math.random() < .05) {\r\n                                tile.type = \"busyroad\";\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n\r\n                case \"downtown\":\r\n                    if (counts[\"empty\"] > 3) {\r\n                        if (Math.random() < .1) {\r\n                            tile.type = \"empty\";\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n            }\r\n\r\n            if (tile.type != initialType) {\r\n                this.drawTile(tile, this.ctx!);\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawAllTiles = () => {\r\n        this.allTiles.forEach(i => this.drawTile(i, this.ctx!));\r\n    }\r\n\r\n    private addNewTiles = () => {\r\n        this.allTiles = this.allTiles.concat(this.newTiles);\r\n        this.newTiles = [];\r\n    }\r\n\r\n    private runStep = () => {\r\n        this.updateTiles();\r\n        this.addNewTiles();\r\n\r\n        if (this.currentSteps < this.generationSteps) {\r\n            this.currentSteps++;\r\n            setTimeout(this.runStep, 50);\r\n        }\r\n        else {\r\n            console.log(\"done making terrain, starting a DAY!\");\r\n            this.startRunningDay();\r\n        }\r\n    }\r\n    private moveUnits = () => {\r\n        this.allUnits.forEach(unit => {\r\n            var stepSize = 1 / this.animationsPerCarTile;\r\n            var goalX = unit.nextTile!.x;\r\n            var goalY = unit.nextTile!.y;\r\n            //console.log(\"moving\");\r\n            //console.log(\"unit: \" + unit.x + \",\" + unit.y);\r\n            //console.log(\"goal: \" + goalX + \",\" + goalY);\r\n\r\n            if (goalX >= unit.x + stepSize) {\r\n                unit.x += stepSize;\r\n            }\r\n            else if (goalX <= unit.x - stepSize) {\r\n                unit.x -= stepSize;\r\n            }\r\n            else {\r\n                unit.x = goalX;\r\n            }\r\n\r\n            if (goalY >= unit.y + stepSize) {\r\n                unit.y += stepSize;\r\n            }\r\n            else if (goalY <= unit.y - stepSize) {\r\n                unit.y -= stepSize;\r\n            }\r\n            else {\r\n                unit.y = goalY;\r\n            }\r\n        });\r\n    }\r\n\r\n    private updateUnits = () => {\r\n        this.allUnits.forEach(unit => {\r\n            // this is wrong for moving.\r\n            // actually use the NEXT tile. since this is where it actually moved TO\r\n            //var unitX = Math.floor(unit.x);\r\n            //var unitY = Math.floor(unit.y);\r\n\r\n            if (unit.nextTile) {\r\n                unit.x = unit.nextTile.x;\r\n                unit.y = unit.nextTile.y;\r\n            }\r\n\r\n            var unitX = unit.x\r\n            var unitY = unit.y;\r\n\r\n            //console.log(\"deciding\");\r\n            //console.log(\"current: \" + ((unit.nextTile && unit.nextTile.x) || \"X\") +\",\" + ((unit.nextTile && unit.nextTile.y) || \"Y\"));\r\n            //console.log(\"last: \" + unit.lastTile!.x +\",\" + unit.lastTile!.y);\r\n\r\n            var difX = unitX - unit.lastTile.x;\r\n            var difY = unitY - unit.lastTile.y;\r\n\r\n            var straightX = unitX + difX;\r\n            var straightY = unitY + difY;\r\n\r\n            var neighbors = this.getCloseNeighbors(unit.x, unit.y, false);\r\n\r\n            // BUY\r\n            var business = neighbors.filter(n => !!n && n.type == \"yourbusiness\");\r\n            if(business.length > 0){\r\n                console.log(\"customer!\");\r\n                if(Math.random() < .35){\r\n                    // sell!\r\n                    // TODO: draw a line! \r\n                    \r\n                    var unitSpot = this.convertToScreenSpace(unit, .5, .5);\r\n                    var businessSpot = this.convertToScreenSpace(business[0]!, .5, .5);\r\n\r\n                    this.ctx!.beginPath();\r\n                    this.ctx!.lineWidth = 2;\r\n                    this.ctx!.strokeStyle = \"gold\";\r\n                    this.ctx!.moveTo(unitSpot.x, unitSpot.y);\r\n                    this.ctx!.lineTo(businessSpot.x, businessSpot.y);\r\n                    this.ctx!.stroke();\r\n                    this.ctx!.closePath();\r\n\r\n                    this.money += 10;\r\n                    console.log(\"SOLD! $\" +this.money);\r\n                }\r\n            }\r\n\r\n            // MOVE\r\n            var straightRoad = neighbors.filter(n =>\r\n                n\r\n                && (n.type == \"road\" || n.type == \"busyroad\")\r\n                && n.x == straightX\r\n                && n.y == straightY);\r\n\r\n            var nextRoad = unit.lastTile;\r\n            if (straightRoad[0] && Math.random() < .9) {\r\n                nextRoad = straightRoad[0]!;\r\n            }\r\n            else {\r\n                var roads = neighbors.filter(n => (n && n != unit.lastTile && (n.type == \"road\" || n.type == \"busyroad\")));\r\n                if (roads.length > 0) {\r\n                    var i = Math.round(Math.random() * (roads.length - 1));\r\n                    nextRoad = roads[i]!;\r\n                }\r\n            }\r\n\r\n            // find a neighboring road, try to avoid the previous tile if possible, but if no others use it\r\n\r\n            // better to.. go straight...\r\n            unit.nextTile = nextRoad;\r\n            //unit.x = unit.nextTile!.x;\r\n            //unit.y = unit.nextTile!.y;\r\n\r\n            unit.lastTile = this.getTile(unitX, unitY, false)!;\r\n\r\n        });\r\n    }\r\n\r\n    private startRunningDay = () => {\r\n        var onlyOneCar = false;\r\n        var onlyOneBusiness = false;\r\n        this.allTiles.forEach(t => {\r\n            // just spawn one for now\r\n            if (!onlyOneCar && t.type == \"house\") {\r\n                var neighbors = this.getCloseNeighbors(t.x, t.y, false);\r\n                var counts = this.getTypes(neighbors);\r\n                if (counts[\"road\"] + counts[\"busyroad\"] > 0) {\r\n                    //x = true;\r\n                    // spawn a car\r\n                    this.allUnits.push({ type: \"car\", x: t.x, y: t.y, lastTile: t });\r\n                }\r\n            }\r\n        });\r\n\r\n        this.allTiles.forEach(t => {\r\n            // just spawn one for now\r\n            if (!onlyOneBusiness && t.type == \"shoppingcenter\" && Math.random() < .1) {\r\n                var neighbors = this.getCloseNeighbors(t.x, t.y, false);\r\n                var counts = this.getTypes(neighbors);\r\n                if (counts[\"road\"] + counts[\"busyroad\"] > 0) {\r\n                    onlyOneBusiness = true;\r\n                    t.type = \"yourbusiness\";\r\n                    this.centerX = t.x;\r\n                    this.centerY = t.y;\r\n                    this.scale = 3;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.runDay();\r\n    }\r\n\r\n    private drawUnit = (unit: IUnit, ctx: CanvasRenderingContext2D) => {\r\n        ctx.fillStyle = \"magenta\";\r\n        var vTileSize = this.tileSize * this.scale;\r\n\r\n        var offsetX = .5;\r\n        var offsetY = .5;\r\n        /*\r\n                if(unit.nextTile && unit.nextTile.x > unit.lastTile.x){\r\n                    // going right, offset y\r\n                    offsetY = .75;\r\n                }\r\n                else if(unit.nextTile && unit.nextTile.x < unit.lastTile.x){\r\n                    // going left, offset y\r\n                    offsetY = .25;\r\n                }\r\n                \r\n                if(unit.nextTile && unit.nextTile.y > unit.lastTile.y){\r\n                    // going up, offset y\r\n                    offsetX = .75;\r\n                }\r\n                else if(unit.nextTile && unit.nextTile.y < unit.lastTile.y){\r\n                    // going left, offset y\r\n                    offsetX = .25;\r\n                }\r\n        */\r\n\r\n        var vTileX = ((unit.x + offsetX - this.centerX)) * vTileSize + (this.canvasSize / 2);\r\n        var vTileY = ((unit.y + offsetY - this.centerY)) * vTileSize + (this.canvasSize / 2);\r\n\r\n        var vRadius = unit.type == \"car\" ? .3 * this.tileSize : .1 * this.tileSize;\r\n        ctx.fillRect(vTileX, vTileY, vRadius, vRadius);\r\n    }\r\n\r\n    private drawAllUnits = () => {\r\n        this.allUnits.forEach(u => this.drawUnit(u, this.ctx!));\r\n    }\r\n\r\n    private animationsPerCarTile = 10;\r\n    private currentAnimationStep = 0;\r\n\r\n    private convertToScreenSpace = (tile: entity, offsetX: number = 0, offsetY: number = 0): entity => {\r\n        var vTileSize = this.tileSize * this.scale;\r\n        var vTileX = ((tile.x + offsetX - this.centerX)) * vTileSize + (this.canvasSize / 2);\r\n        var vTileY = ((tile.y + offsetY - this.centerY)) * vTileSize + (this.canvasSize / 2);\r\n\r\n        return {x: vTileX, y: vTileY};\r\n    }\r\n\r\n    private runDay = () => {\r\n        this.clearMap();\r\n        if (this.currentAnimationStep == 0) {\r\n            this.updateUnits();\r\n        }\r\n        else {\r\n            this.moveUnits();\r\n        }\r\n\r\n        // do the shooty thing?\r\n\r\n        this.currentAnimationStep++;\r\n        if (this.currentAnimationStep > this.animationsPerCarTile) { this.currentAnimationStep = 0; }\r\n\r\n        // animate X times?\r\n\r\n        setTimeout(this.runDay, 10);\r\n    }\r\n\r\n    private clearMap = () => {\r\n        this.ctx!.fillStyle = \"green\";\r\n        this.ctx!.fillRect(0, 0, this.canvasSize, this.canvasSize);\r\n        this.drawAllTiles();\r\n        this.drawAllUnits();\r\n\r\n        // draw circle around the base\r\n    }\r\n\r\n    private dragging = false;\r\n    private startX = 0;\r\n    private startY = 0;\r\n\r\n    render() {\r\n        return <div>\r\n            <div>\r\n                <button onClick={() => { this.runDay() }}>STEP</button>\r\n                <button onClick={() => { this.scale *= 1.1; this.clearMap(); }}>+</button>\r\n                <button onClick={() => { this.scale *= .9; this.clearMap(); }}>-</button>\r\n            </div>\r\n            <canvas\r\n                onMouseDown={ev => { this.dragging = true; this.startX = ev.screenX; this.startY = ev.screenY; }}\r\n                onMouseUp={ev => { this.dragging = false; }}\r\n                onMouseMove={ev => {\r\n                    if (this.dragging) {\r\n                        this.centerX += (this.startX - ev.screenX) / (this.scale * this.tileSize);\r\n                        this.centerY += (this.startY - ev.screenY) / (this.scale * this.tileSize);\r\n                        this.startX = ev.screenX; this.startY = ev.screenY;\r\n                        this.clearMap();\r\n                    }\r\n                }}\r\n                width={this.canvasSize.toString()}\r\n                height={this.canvasSize.toString()}\r\n                style={{ height: this.canvasSize + \"px\", width: this.canvasSize + \"px\" }}\r\n                ref={c => {\r\n                    if (!this.canvas && c) {\r\n                        this.canvas = c;\r\n                        this.ctx = this.canvas!.getContext(\"2d\");\r\n\r\n                        this.seedWater();\r\n                        this.seedNature();\r\n                        this.seedRoads();\r\n\r\n                        this.addNewTiles();\r\n                        this.clearMap();\r\n\r\n                        setTimeout(this.runStep, 50);\r\n                    }\r\n                }} />\r\n        </div>;\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { GameBoard } from './game';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}